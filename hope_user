#!/usr/bin/env python3

import requests
import getpass
import sys
import MySQLdb
import time
import bcrypt
import json
import csv

from passlib.hash import argon2
from crypto_functions import *


#
# user's input
#

key = getpass.getpass('Admin Password: ')

# if admin password is not correct, end the script
argon_hash = '$argon2i$v=19$m=102400,t=2,p=8$ktKak5KSknIOIaT0HsOY8w$b0X0vopPo/xbdx1n6lAkXA'

if not argon2.verify(key, argon_hash):
    print ('bad password')
    sys.exit()

action = sys.argv[1]


#
# varibles, these need to be ajusted to your enviorment 
#

# key/token is stored encrypted, but decrypted by admin password at runtime

cipher = AESCipher(key)

secret_server = '10.2.0.23'
secret_token = cipher.decrypt('Qoqk2jaA+RMTgP8v15AR49UemF9rCIdoAdMu2Nu9Bt4Fk3FeEMdRht6IS32e6GD3RD6bSDF1i/ah86AmmrJWv0AiQdnVbPnKHwgOg1vYEys=')
secret_url = "http://%s/api/get_secret.php" % secret_server

osticket_server = '10.2.0.15'
osticket_user = 'account_creator'
osticket_password = requests.post(secret_url, data={'id': 4, 'token': secret_token})

rocket_chat_server = '10.2.0.16'
rocket_chat_id = requests.post(secret_url, data={'id': 6, 'token': secret_token})
rocket_chat_key = requests.post(secret_url, data={'id': 5, 'token': secret_token})

radius_server = '10.2.0.4'
radius_user = 'account_creator'
radius_password = requests.post(secret_url, data={'id': 3, 'token': secret_token})

hope_matters_server = '10.2.0.23'
hope_matters_user = 'account_creator'
hope_matters_password = requests.post(secret_url, data={'id': 2, 'token': secret_token})

# timestamp
now = time.strftime('%Y-%m-%d %H:%M:%S')


def create_user(first_name, last_name, username, full_name, email, location, job_title, password, password_bcrypt, password_argon):

	#
	# hope_matters
	#

	mydb = MySQLdb.connect(
	  host=hope_matters_server,
	  user=hope_matters_user,
	  passwd=hope_matters_password.text,
	  db="hope_matters"
	)

	cursor = mydb.cursor()


	# see if user already exists, script should exit if it does
	cursor.execute("SELECT COUNT(*) FROM `accounts` WHERE `username` = '%s';" % username)
	rows = cursor.fetchall()
	row = str(rows[0])
	user_count = int(row[1:-2])


	if user_count == 0:

	    cursor.execute("INSERT INTO `accounts` (`username`, `first_name`, `last_name`, `job_title`, `work_location`, `email`, `master_log_access`, `server_admin`, `password`, `created_by`) VALUES (%s, %s, %s, %s, %s, %s, 'no', 'no', %s, 'account_creator');", (username, first_name, last_name, job_title, location, email, password_argon))

	else:
	    print('')
	    print("user \"%s\" already exists" % username)
	    sys.exit()


	mydb.commit()
	mydb.close()


	#
	# wifi/radius
	#

	mydb = MySQLdb.connect(
	  host=radius_server,
	  user=radius_user,
	  passwd=radius_password.text,
	  db="radius"
	)

	cursor = mydb.cursor()


	cursor.execute("INSERT INTO `radcheck` (`username`, `attribute`, `op`, `value`) VALUES (%s, 'Cleartext-Password', ':=', %s);", (username, password))

	cursor.execute("INSERT INTO `radusergroup` (`username`, `groupname`, `priority`) VALUES ('%s', 'internal', '0');" % username)

	cursor.execute("INSERT INTO `userinfo` (`username`, `changeuserinfo`, `enableportallogin`, `creationdate`, `creationby`, `updatedate`) VALUES (%s, '0', '0', %s, 'administrator', %s);", (username, now, now))


	mydb.commit()
	mydb.close()


	#
	# rocketchat
	#

	rocket_chat_url = "http://%s:80/api/v1/users.create" % rocket_chat_server
	rocket_chat_headers = {"Content-type": "application/json", "X-User-Id": rocket_chat_id.text, "X-Auth-Token": rocket_chat_key.text }
	rocket_chat_data = {"name": full_name, "email": email, "password": password, "username": username}
	rocket_chat_data = json.dumps(rocket_chat_data)


	response = requests.post(rocket_chat_url, data=rocket_chat_data, headers=rocket_chat_headers )

	#
	# osticket
	#

	mydb = MySQLdb.connect(
	  host=osticket_server,
	  user=osticket_user,
	  passwd=osticket_password.text,
	  db="osticket_db"
	)

	cursor = mydb.cursor()


	# gets next avalible user_id, this needs to be the same across all 3 tables
	cursor.execute("SELECT `AUTO_INCREMENT` FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'osticket_db' AND TABLE_NAME = 'ost_user';")

	rows = cursor.fetchall()
	row = str(rows[0])
	user_id = row[1:-2]


	cursor.execute("INSERT INTO `ost_user_email` (`id`, `user_id`, `flags`, `address`) VALUES (%s, %s, '0', %s);", (user_id, user_id, email))

	cursor.execute("INSERT INTO `ost_user` (`org_id`, `default_email_id`, `status`, `name`, `created`, `updated`) VALUES ('0', %s, '0', %s, %s, %s);", (user_id, username, now, now))

	cursor.execute("INSERT INTO `ost_user_account` (`user_id`, `status`, `username`, `passwd`, `registered`) VALUES (%s, '1', %s, %s, %s);", (user_id, username, password_bcrypt, now))


	mydb.commit()
	mydb.close()


if action == 'add':

	first_name = input("First name: ")
	last_name = input("Last name: ")
	username = first_name[0] + last_name
	full_name = first_name + ' ' +  last_name

	email = input("Email: ")
	location = input("Location: ")
	job_title = input("Job title: ")

	password = getpass.getpass("User Password: ")
	password_bcrypt = str(bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt(prefix=b"2a", rounds=8)))
	password_bcrypt = password_bcrypt[2:-1]
	password_argon = argon2.hash(password)

	create_user(first_name, last_name, username, full_name, email, location, job_title, password, password_bcrypt, password_argon)

elif action == 'bulk':

	with open(sys.argv[2], mode='r') as csv_file:
		csv_reader = csv.reader(csv_file, delimiter=',')		
		for row in csv_reader:

			first_name = row[0]
			last_name = row[1]
			username = first_name[0] + last_name
			full_name = first_name + ' ' +  last_name

			email = row[2]
			location = row[3]
			job_title = row[4]

			password = row[5]
			password_bcrypt = str(bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt(prefix=b"2a", rounds=8)))
			password_bcrypt = password_bcrypt[2:-1]
			password_argon = argon2.hash(password)

			create_user(first_name, last_name, username, full_name, email, location, job_title, password, password_bcrypt, password_argon)


